享元模式
1.使用共享对象可以支持大量的细粒度的对象
2.内部状态与外部状态
（1）内部状态
	内部状态是对象可共享出来的信息，存储在享元对象内部，并且不会随环境的改变而改变，如例子中的ip,postAddress,它们可以作为
	一个对象的动态附加信息，不必直接存储在具体某个对象中，属于可以共享的部分。

（2）外部状态
	外部状态是一个对象得以依赖的标记，是随环境改变而改变的，不可以共享的状态，如例子中考试科目+考试地点的复合字符串，它是一批对象的
	统一标识，是唯一的一个索引值。

3.享元模式的角色
（1）FlyWeight--抽象享元角色
	它简单的说就是一个产品的抽象类，同时定义出对象的内部状态和外部状态的接口或实现
	一般的，将外部状态属性设置为final类型，以防篡改。
	（在程序开发中，同样的，确认只需要一次赋值的属性则设置为final）
（2）ConcreteFlyWeight--具体享元角色
	具体产品类，实现抽象角色定义的业务，
	需要注意，内部状态处理应该与环境无关，不应该出现一个操作改变了内部状态，同时修改了外部状态，这是绝对不允许的。
（3）UnSharedConcreteFlyWeight--不可共享的享元角色
	不存在外部状态或者安全要求，不能够使用共享技术的对象，该对象一般不会出现在享元工程中
（4）FlyWeightFactory--享元工厂
	构造池，提供从池中获取对象的方法。
	
4.优点、缺点
	优点：降低程序内存占用，增加性能
	缺点：提高了系统复杂度，需要分离出内部状态和外部状态

5.使用场景
	@系统中存在大量的相似对象
	@细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关，也就是对象没有特定身份。
	@需要缓冲池的场景。

6.注意：用基本数据类型（如String,int）作为外部状态，效率更高。



